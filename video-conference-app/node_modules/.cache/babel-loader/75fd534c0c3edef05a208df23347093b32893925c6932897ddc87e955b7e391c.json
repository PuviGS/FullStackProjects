{"ast":null,"code":"var _jsxFileName = \"/home/puvi/Desktop/video-conference-app/client/src/components/VideoChat.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport './make.css';\n\n// Set up the socket connection\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst socket = io('http://localhost:5000');\nconst VideoChat = ({\n  roomId,\n  username\n}) => {\n  _s();\n  const localVideoRef = useRef(null);\n  const [users, setUsers] = useState([]);\n  useEffect(() => {\n    // Access user media (video and audio)\n    navigator.mediaDevices.getUserMedia({\n      video: true,\n      audio: true\n    }).then(stream => {\n      // Assign the stream to the video element\n      localVideoRef.current.srcObject = stream;\n    }).catch(err => {\n      console.error('Failed to access media devices', err);\n    });\n\n    // Emit 'join-room' event to the server with roomId and username\n    socket.emit('join-room', {\n      roomId,\n      username\n    });\n\n    // Listen for the 'user-joined' event and add the user to the list\n    socket.on('user-joined', username => {\n      setUsers(prev => [...prev, username]);\n    });\n\n    // Listen for 'user-disconnected' event and remove the user from the list\n    socket.on('user-disconnected', username => {\n      setUsers(prev => prev.filter(user => user !== username));\n    });\n\n    // Clean up the socket connection when the component unmounts\n    return () => {\n      socket.disconnect();\n    };\n  }, [roomId, username]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"video-chat-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      className: \"room-title\",\n      children: [\"Room: \", roomId]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"video\", {\n      ref: localVideoRef,\n      autoPlay: true,\n      playsInline: true,\n      className: \"video-box\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"user-list\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Users in Room:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n        children: users.map((user, index) => /*#__PURE__*/_jsxDEV(\"li\", {\n          children: user\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 55,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoChat, \"Inp6NTTIb6v7qUHXzUWKckkG0rc=\");\n_c = VideoChat;\nexport default VideoChat;\nvar _c;\n$RefreshReg$(_c, \"VideoChat\");","map":{"version":3,"names":["React","useEffect","useRef","useState","io","jsxDEV","_jsxDEV","socket","VideoChat","roomId","username","_s","localVideoRef","users","setUsers","navigator","mediaDevices","getUserMedia","video","audio","then","stream","current","srcObject","catch","err","console","error","emit","on","prev","filter","user","disconnect","className","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","autoPlay","playsInline","map","index","_c","$RefreshReg$"],"sources":["/home/puvi/Desktop/video-conference-app/client/src/components/VideoChat.js"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport io from 'socket.io-client';\nimport './make.css';\n\n// Set up the socket connection\nconst socket = io('http://localhost:5000');\n\nconst VideoChat = ({ roomId, username }) => {\n  const localVideoRef = useRef(null);\n  const [users, setUsers] = useState([]);\n\n  useEffect(() => {\n    // Access user media (video and audio)\n    navigator.mediaDevices.getUserMedia({ video: true, audio: true })\n      .then((stream) => {\n        // Assign the stream to the video element\n        localVideoRef.current.srcObject = stream;\n      })\n      .catch((err) => {\n        console.error('Failed to access media devices', err);\n      });\n\n    // Emit 'join-room' event to the server with roomId and username\n    socket.emit('join-room', { roomId, username });\n\n    // Listen for the 'user-joined' event and add the user to the list\n    socket.on('user-joined', (username) => {\n      setUsers((prev) => [...prev, username]);\n    });\n\n    // Listen for 'user-disconnected' event and remove the user from the list\n    socket.on('user-disconnected', (username) => {\n      setUsers((prev) => prev.filter(user => user !== username));\n    });\n\n    // Clean up the socket connection when the component unmounts\n    return () => {\n      socket.disconnect();\n    };\n  }, [roomId, username]);\n\n  return (\n    <div className=\"video-chat-container\">\n      {/* Display the room ID */}\n      <h1 className=\"room-title\">Room: {roomId}</h1>\n      \n      {/* Display the local video stream */}\n      <video ref={localVideoRef} autoPlay playsInline className=\"video-box\"></video>\n\n      {/* Display the list of users currently in the room */}\n      <div className=\"user-list\">\n        <h2>Users in Room:</h2>\n        <ul>\n          {users.map((user, index) => (\n            <li key={index}>{user}</li>\n          ))}\n        </ul>\n      </div>\n    </div>\n  );\n};\n\nexport default VideoChat;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}